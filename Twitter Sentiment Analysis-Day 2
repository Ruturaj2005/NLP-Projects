{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2510329,"sourceType":"datasetVersion","datasetId":1520310}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/ruturajpandharkar/twitter-sentiment-analysis?scriptVersionId=244747574\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-06-10T03:54:30.667697Z","iopub.execute_input":"2025-06-10T03:54:30.668084Z","iopub.status.idle":"2025-06-10T03:54:31.225894Z","shell.execute_reply.started":"2025-06-10T03:54:30.668048Z","shell.execute_reply":"2025-06-10T03:54:31.224915Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/twitter-entity-sentiment-analysis/twitter_validation.csv\n/kaggle/input/twitter-entity-sentiment-analysis/twitter_training.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import WordNetLemmatizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import LinearSVC\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n\nnltk.download('punkt')\nnltk.download('stopwords')\nnltk.download('wordnet')\n\nplt.style.use('ggplot')\nsns.set(style='whitegrid')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-10T18:19:27.509345Z","iopub.execute_input":"2025-06-10T18:19:27.509668Z","iopub.status.idle":"2025-06-10T18:19:31.299761Z","shell.execute_reply.started":"2025-06-10T18:19:27.509644Z","shell.execute_reply":"2025-06-10T18:19:31.298876Z"}},"outputs":[{"name":"stderr","text":"[nltk_data] Downloading package punkt to /usr/share/nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n[nltk_data] Downloading package wordnet to /usr/share/nltk_data...\n[nltk_data]   Package wordnet is already up-to-date!\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"train_data = pd.read_csv('/kaggle/input/twitter-entity-sentiment-analysis/twitter_training.csv', header=None)\ntest_data = pd.read_csv('/kaggle/input/twitter-entity-sentiment-analysis/twitter_validation.csv', header=None)\n\n\ncolumns = ['tweet_id', 'entity', 'label', 'tweet']\ntrain_data.columns = test_data.columns = columns\n\n\nprint(\"Training data shape:\", train_data.shape)\nprint(\"Test data shape:\", test_data.shape)\n\nprint(train_data['label'].value_counts())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-10T18:19:31.300901Z","iopub.execute_input":"2025-06-10T18:19:31.301353Z","iopub.status.idle":"2025-06-10T18:19:31.769434Z","shell.execute_reply.started":"2025-06-10T18:19:31.301329Z","shell.execute_reply":"2025-06-10T18:19:31.768541Z"}},"outputs":[{"name":"stdout","text":"Training data shape: (74682, 4)\nTest data shape: (1000, 4)\nlabel\nNegative      22542\nPositive      20832\nNeutral       18318\nIrrelevant    12990\nName: count, dtype: int64\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"print(\"\\nMissing values in training data:\")\nprint(train_data.isnull().sum())\n\nprint(\"\\nMissing values in test data:\")\nprint(test_data.isnull().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-10T18:19:31.770424Z","iopub.execute_input":"2025-06-10T18:19:31.770688Z","iopub.status.idle":"2025-06-10T18:19:31.794255Z","shell.execute_reply.started":"2025-06-10T18:19:31.770667Z","shell.execute_reply":"2025-06-10T18:19:31.792991Z"}},"outputs":[{"name":"stdout","text":"\nMissing values in training data:\ntweet_id      0\nentity        0\nlabel         0\ntweet       686\ndtype: int64\n\nMissing values in test data:\ntweet_id    0\nentity      0\nlabel       0\ntweet       0\ndtype: int64\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"import re\ndef clean_text(text):\n    if not isinstance(text, str):\n        return \"\"\n    text=re.sub(r\"http\\S+\",\"\",text)\n    text=re.sub(r\"@\\w+\",\"\",text)\n    text = re.sub(r\"#\\w+\", \"\", text)\n    text = re.sub(r\"[^\\w\\s]\", \"\", text)\n    return text.strip()\ntrain_data['clean_tweet'] = train_data['tweet'].apply(clean_text)\ntest_data['clean_tweet'] = test_data['tweet'].apply(clean_text)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-10T18:38:25.279914Z","iopub.execute_input":"2025-06-10T18:38:25.280249Z","iopub.status.idle":"2025-06-10T18:38:25.787504Z","shell.execute_reply.started":"2025-06-10T18:38:25.280197Z","shell.execute_reply":"2025-06-10T18:38:25.78658Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"X_train = train_data['clean_tweet']\ny_train = train_data['label']\n\nX_test = test_data['clean_tweet']\ny_test = test_data['label']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-10T18:38:27.713615Z","iopub.execute_input":"2025-06-10T18:38:27.713906Z","iopub.status.idle":"2025-06-10T18:38:27.719566Z","shell.execute_reply.started":"2025-06-10T18:38:27.713886Z","shell.execute_reply":"2025-06-10T18:38:27.718427Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"from sklearn.feature_extraction.text import TfidfVectorizer\n\ntfidf_vect = TfidfVectorizer(ngram_range=(1,2))\nX_train_tfidf = tfidf_vect.fit_transform(X_train)\nX_test_tfidf = tfidf_vect.transform(X_test)\n\nmodel_tfidf = LogisticRegression(max_iter=1000)\nmodel_tfidf.fit(X_train_tfidf, y_train)\n\n# Predict and evaluate\ny_pred_tfidf = model_tfidf.predict(X_test_tfidf)\n\nprint(\"Classification Report - TF-IDF:\")\nprint(classification_report(y_test, y_pred_tfidf))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-10T18:38:44.474157Z","iopub.execute_input":"2025-06-10T18:38:44.474524Z","iopub.status.idle":"2025-06-10T18:40:50.884025Z","shell.execute_reply.started":"2025-06-10T18:38:44.474489Z","shell.execute_reply":"2025-06-10T18:40:50.883043Z"}},"outputs":[{"name":"stdout","text":"Classification Report - TF-IDF:\n              precision    recall  f1-score   support\n\n  Irrelevant       0.98      0.96      0.97       172\n    Negative       0.98      0.98      0.98       266\n     Neutral       0.99      0.98      0.98       285\n    Positive       0.96      0.98      0.97       277\n\n    accuracy                           0.98      1000\n   macro avg       0.98      0.97      0.98      1000\nweighted avg       0.98      0.98      0.98      1000\n\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-10T18:45:22.849024Z","iopub.execute_input":"2025-06-10T18:45:22.849366Z","iopub.status.idle":"2025-06-10T18:45:22.85491Z","shell.execute_reply.started":"2025-06-10T18:45:22.849341Z","shell.execute_reply":"2025-06-10T18:45:22.853696Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"acc = accuracy_score(y_test, y_pred_tfidf)\nprint(f\"Accuracy: {acc:.4f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-10T18:46:04.243678Z","iopub.execute_input":"2025-06-10T18:46:04.244022Z","iopub.status.idle":"2025-06-10T18:46:04.251753Z","shell.execute_reply.started":"2025-06-10T18:46:04.243997Z","shell.execute_reply":"2025-06-10T18:46:04.250743Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.9760\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}